---
title: Webgen::Tag::Menu
---
## Description

The menu tag builds a seemingly simple menu using HTML lists. However, it is very flexible due to
its many parameters that let you decide every detail of the menu.

> The menu is constructed using HTML lists with `ul` and `li` tags.  However, the menu normally
> looks better if no discs are shown for the menu items (using the CSS directive `list-style-type:
> none`).
{.information}

It uses the meta information `in_menu` and `sort_info` to determine which nodes should be in the
menu and how they should be ordered. A separate menu tree is then created from all nodes for each
language.

The following configuration options (all are optional) are used by the menu tag (for detailed
information on one of the options have a look at the [Configuration Options Reference]({relocatable:
../reference_configuration.html}). They allow for an easy customization of the menu:

* `tag.menu.used_nodes`
* `tag.menu.start_level`
* `tag.menu.min_levels`
* `tag.menu.max_levels`
* `tag.menu.show_current_subtree_only`

By setting the option `tag.menu.used_nodes` to `fragments`, the menu tag can also be used for
generating an in-page content menu of all the header sections.

> When using the option value `files` for `tag.menu.used_nodes`, all nodes which are only in the
> menu because they have fragment nodes beneath them are not included in the menu.
{.exclamation}

The rendered menu consists of `ul` and `li` tags and the links to the menu entries as well as a
surrounding `div` tag. The `li` tags have special CSS classes set for styling. These CSS class names
are as follows:

* `webgen-menu-submenu`: Set if the menu item contains sub menu items.
* `webgen-menu-submenu-inhierarchy`: Set if the menu item contains sub menu items and it is in the
  sub tree of the rendered node.
* `webgen-menu-item-selected`: Set if the menu item corresponds to the rendered node.


## "Static" Menus

It is also possible to define a "static" menu or to augment the dynamic menu with static entries by
using virtual files. They can be used to structure the menu the way you like it. This way it is also
possible to add one page under two different headings:

    features.en.html:
      in_menu: true
      title: Features
      url: index.en.html#features

    newdir:
      sort_info: 2

    newdir/new.en.html:
      sort_info: 1
      in_menu: true
      url: ../features.en.html

There is no need to specify `in_menu` for `newdir` since a page under the directory is in the
menu. Also be aware that you need to set the language explicitly if a file should only appear in the
menu for a specific language. Otherwise it appears in every menu. The `url` specifies the file that
should be shown when clicked on the generated link.

A completely "static" menu can be generated by only using virtual directories and files and not
setting `in_menu` for any other node.

## Examples

<table class="examples">
<tr>
  <th>Usage</th><th>Output</th>
</tr>
<tr>
  <td>\{menu: }</td>
  <td>{menu:}</td>
</tr>
<tr>
  <td>\{menu: {used_nodes: all}}</td>
  <td>{menu: {used_nodes: all}}</td>
</tr>
<tr>
  <td>\{menu: {used_nodes: files}}</td>
  <td>{menu: {used_nodes: files}}</td>
</tr>
<tr>
  <td>\{menu: {used_nodes: fragments}}</td>
  <td>{menu: {used_nodes: fragments}}</td>
</tr>
</table>
